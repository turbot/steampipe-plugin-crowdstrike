package crowdstrike

import (
	"context"
	"fmt"
	"time"

	"github.com/crowdstrike/gofalcon/falcon"
	"github.com/crowdstrike/gofalcon/falcon/client"
	"github.com/crowdstrike/gofalcon/falcon/client/spotlight_vulnerabilities"
	"github.com/crowdstrike/gofalcon/falcon/models"
	"github.com/turbot/steampipe-plugin-sdk/v5/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin/transform"
)

func tableCrowdStrikeSpotlightVulnerability(_ context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "crowdstrike_spotlight_vulnerability",
		Description: "Known CVE identified vulnerabilities in the environment.",
		Get: &plugin.GetConfig{
			Hydrate:    getCrowdStrikeSpotlightVulnerability,
			KeyColumns: plugin.SingleColumn("id"),
		},
		List: &plugin.ListConfig{
			Hydrate: listCrowdStrikeSpotlightVulnerabilities,
			KeyColumns: []*plugin.KeyColumn{
				{
					Name:      "aid",
					Require:   plugin.Optional,
					Operators: []string{"="},
				},
				{
					Name:      "status",
					Require:   plugin.Optional,
					Operators: []string{"="},
				},
				{
					Name:      "closed_timestamp",
					Require:   plugin.Optional,
					Operators: []string{">", ">=", "=", "<", "<="},
				},
				{
					Name:      "created_timestamp",
					Require:   plugin.Optional,
					Operators: []string{">", ">=", "=", "<", "<="},
				},
				{
					Name:      "updated_timestamp",
					Require:   plugin.Optional,
					Operators: []string{">", ">=", "=", "<", "<="},
				},
			},
		},
		Columns: []*plugin.Column{
			{Name: "cid", Description: "The Customer ID.", Type: proto.ColumnType_STRING},
			{Name: "aid", Description: "The agent ID", Type: proto.ColumnType_STRING},
			{Name: "app", Description: "The app which has the vulnerability.", Type: proto.ColumnType_JSON},
			{Name: "apps", Description: "Collection of apps with this vulnerability.", Type: proto.ColumnType_JSON},
			{Name: "closed_timestamp", Description: "Timestamp when this vulnerability was closed.", Type: proto.ColumnType_TIMESTAMP},
			{Name: "created_timestamp", Description: "Timestamp when this vulnerability was created.", Type: proto.ColumnType_TIMESTAMP},
			{Name: "cve", Description: "CVE identifier of this vulnerability.", Type: proto.ColumnType_JSON},
			{Name: "host_info", Description: "Host information.", Type: proto.ColumnType_JSON},
			{Name: "id", Description: "Vulnerability ID.", Type: proto.ColumnType_STRING},
			{Name: "remediation", Description: "Remediation steps.", Type: proto.ColumnType_JSON},
			{Name: "status", Description: "Vulnerability status.", Type: proto.ColumnType_STRING},
			{Name: "updated_timestamp", Description: "Timestamp when this vulnerability was last udpated.", Type: proto.ColumnType_TIMESTAMP},

			// Steampipe standard columns
			{Name: "title", Description: "Title of the resource.", Type: proto.ColumnType_STRING, Transform: transform.FromField("Id")},
		},
	}
}

func listCrowdStrikeSpotlightVulnerabilities(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	client, err := getCrowdStrikeClient(ctx, d)
	if err != nil {
		plugin.Logger(ctx).Error("crowdstrike_host.listCrowdStrikeSpotlightVulnerabilities", "connection_error", err)
		return nil, err
	}

	limit := int64(400) //  must be between 1 and 400
	// Reduce the basic request limit down if the user has only requested a small number of rows
	if d.QueryContext.Limit != nil && *d.QueryContext.Limit < limit {
		limit = *d.QueryContext.Limit
	}

	filter, err := QualToFQL(ctx, d, QualToFqlNoKeyignore, fmt.Sprintf("created_timestamp:>'%s'", time.Time{}.Format(qualToFqlTimestampFormat)))
	if err != nil {
		return nil, err
	}
	sort := "created_timestamp|asc"
	after := (*string)(nil)

	for {

		response, err := client.SpotlightVulnerabilities.QueryVulnerabilities(
			spotlight_vulnerabilities.
				NewQueryVulnerabilitiesParamsWithContext(ctx).
				WithAfter(after).
				WithFilter(filter).
				WithSort(&sort).
				WithLimit(&limit),
		)

		if err != nil {
			return nil, err
		}
		if err = falcon.AssertNoError(response.Payload.Errors); err != nil {
			return nil, err
		}

		vulnerabilityIdBatch := response.Payload.Resources

		if vulnDetails, err := getVulnerabilityDetails(ctx, client, vulnerabilityIdBatch); err == nil {
			for _, vuln := range vulnDetails {
				d.StreamListItem(ctx, vuln)
				if d.RowsRemaining(ctx) < 1 {
					return nil, nil
				}
			}
		} else {
			return nil, err
		}

		if response.Payload.Meta == nil && response.Payload.Meta.Pagination == nil && response.Payload.Meta.Pagination.Limit == nil {
			return nil, fmt.Errorf("Cannot paginate Vulnerabilities, pagination information missing")
		}
		if *response.Payload.Meta.Pagination.Limit > int32(len(vulnerabilityIdBatch)) {
			// We have got less items than what was the limit. Meaning, this is last batch, continuation is futile.
			break
		} else {
			after = response.Payload.Meta.Pagination.After
		}

	}

	return nil, nil
}

func getVulnerabilityDetails(ctx context.Context, client *client.CrowdStrikeAPISpecification, ids []string) ([]*models.DomainAPIVulnerabilityV2, error) {
	if len(ids) == 0 {
		return []*models.DomainAPIVulnerabilityV2{}, nil
	}

	response, err := client.SpotlightVulnerabilities.GetVulnerabilities(
		spotlight_vulnerabilities.
			NewGetVulnerabilitiesParamsWithContext(ctx).
			WithIds(ids),
	)
	if err != nil {
		return nil, err
	}
	if err = falcon.AssertNoError(response.Payload.Errors); err != nil {
		return nil, err
	}

	return response.Payload.Resources, nil
}

func getCrowdStrikeSpotlightVulnerability(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	client, err := getCrowdStrikeClient(ctx, d)
	if err != nil {
		plugin.Logger(ctx).Error("crowdstrike_spotlight_vulnerability.getCrowdStrikeSpotlightVulnerability", "connection_error", err)
		return nil, err
	}

	vulnId := d.EqualsQuals["id"].GetStringValue()

	response, err := client.SpotlightVulnerabilities.GetVulnerabilities(
		spotlight_vulnerabilities.NewGetVulnerabilitiesParams().
			WithContext(ctx).
			WithIds([]string{vulnId}),
	)

	if err != nil {
		plugin.Logger(ctx).Error("crowdstrike_spotlight_vulnerability.getCrowdStrikeSpotlightVulnerability", "get_role_error", err)
		return nil, err
	}

	return response.Payload.Resources[0], nil
}
